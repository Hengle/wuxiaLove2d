---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 18-9-18 下午4:03
---

--- @class SkillTreeStage

SkillTreeStage = Class("SkillTreeStage")

function SkillTreeStage:init()
    self.area = Area(self)
    self.tree = table.copy(tree)
    self.nodes = {}
    self.lines = {}
    --self.timer = Timer()
    self.background = assets.graphics.Backgrounds.bg
    self.main_canvas = love.graphics.newCanvas(sw * gw,sh * gh)
    for id,node in ipairs(self.tree) do
        for _,linked_node_id in ipairs(node.links or {}) do
            table.insert(self.tree[linked_node_id],id)
        end
    end
    for id, node in ipairs(self.tree) do table.insert(self.nodes, Node(id, node.x, node.y)) end
    for id, node in ipairs(self.tree) do
        if node.links then
            for _, linked_node_id in ipairs(node.links) do
                table.insert(self.lines, Line(id, linked_node_id))
            end
        end
    end
end

function SkillTreeStage:update(dt)
    for _, node in ipairs(self.nodes) do
        node:update(dt)
    end
    for _, line in ipairs(self.lines) do
        line:update(dt)
    end


    if love.mouse.isDown(1) then
        local mx,my = camera:getMousePosition(sw,sh,0,0,sw * gw,sh * gh)
        local dx,dy = mx - self.previous_mx,my - self.previous_my
        camera:move(-dx,-dy)
    end
    self.previous_mx,self.previous_my = camera:getMousePosition(sw,sh,0,0,sw * gw,sh * gh)

    --if input:pressed("zoom_in") then
    --    timer:tween(0.2,camera,{scale = camera.scale + 0.4},'in-out-cubic')
    --end
    --if input:pressed("zoom_out") then
    --    timer:tween(0.2,camera,{scale = camera.scale - 0.4},'in-out-cubic')
    --end
end


function SkillTreeStage:draw()

    love.graphics.setCanvas(self.main_canvas)
    love.graphics.clear()
    camera:attach(0,0,gw*sw,gh*sh)
    if self.area then self.area:draw() end
    love.graphics.draw(self.background)
    for _, line in ipairs(self.lines) do
        line:draw()
    end
    for _, node in ipairs(self.nodes) do
        node:draw()
    end


    local font = font18
    love.graphics.setFont(font)
    for _,node in ipairs(self.nodes) do
        if node.hot then
            local stats = tree[node.id].stats
            --- get max text width
            local max_text_width = 0
            for i=1,#stats,3 do
                if font:getWidth(stats[i]) > max_text_width then
                    max_text_width = font:getWidth(stats[i])
                end
            end
            --- draw rectangle
            local mx,my = camera:getMousePosition(sw,sh,0,0,sw * gw,sh * gh)
            --local mx,my = love.mouse.getPosition()
            mx,my = mx/sx,my/sy

            love.graphics.setColor(255,0,0,222)
            love.graphics.rectangle('fill',mx,my
            ,16 + max_text_width,font:getHeight() + #stats/3 * font:getHeight())
            --- draw text
            love.graphics.setColor(Color.default)
            for i = 1,#stats,3 do
                love.graphics.print(stats[i]
                ,math.floor(mx + 8),math.floor(my + font:getHeight()/2 + math.floor(i/3) * font:getHeight()))
            end
        end
    end
    camera:detach()
    love.graphics.setColor(1,1,1)
    love.graphics.setCanvas()
    --love.graphics.setBlendMode('alpha','premultiplied')
    love.graphics.draw(self.main_canvas,0,0)
end

function SkillTreeStage:canNodeBeBought(id)
    for _,linked_node_id in ipairs(self.tree[id]) do
        if fn.any(bought_node_indexes,linked_node_id) then return true end
    end
end

function SkillTreeStage:activate()
    self.ui.setGroupVisible(self.ui_group,true)
    --self.ui.setGroupEnabled(self.ui_group,true)
end

function SkillTreeStage:deactivate()
    upper_room = current_room
    self.ui.setGroupVisible(self.ui_group,false)
    --self.ui.setGroupEnabled(self.ui_group,false)
end

function SkillTreeStage:mousereleased()
    --self.ui.released()
end

function SkillTreeStage:mousepressed()
    --self.ui.pressed()
end

